# -*- coding: utf-8 -*-
import json
import time
import pandas as pd
from datetime import datetime
from threading import Thread
from pathlib import Path
from operator import itemgetter

import requests
import pymysql
import vk_api
import yaml
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from fuzzywuzzy import fuzz
from pytils import numeral
from functions import console_log, get_next


BASE_DIR = Path(__file__).resolve().parent
CONFIG_PATH = BASE_DIR.joinpath("config.yaml")

# –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
with open(CONFIG_PATH) as ymlFile:
    config = yaml.load(ymlFile.read(), Loader=yaml.Loader)


def reconnect():
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    global db, mycursor

    try:
        db.close()
        db = pymysql.connect(
            host=config["database"]["host"],
            user=config["database"]["user"],
            passwd=config["database"]["passwd"],
            db=config["database"]["db"]
        )
        mycursor = db.cursor()

        console_log("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    except:
        """–ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–µ"""
        db = pymysql.connect(
            host=config["database"]["host"],
            user=config["database"]["user"],
            passwd=config["database"]["passwd"],
            db=config["database"]["db"]
        )
        mycursor = db.cursor()

        console_log("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

def connection():
    """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        reconnect()
        time.sleep(300)

def create_tables():
    """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã Chats –∏ Channels, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å —á–∞—Ç–∞–º–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    mycursor.execute("""
    	CREATE TABLE IF NOT EXISTS Chats(
    	id int PRIMARY KEY,
    	added datetime NOT NULL
    	)
    """)

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å —é—Ç—É–± –∫–∞–Ω–∞–ª–∞–º–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    mycursor.execute("""
    	CREATE TABLE IF NOT EXISTS Channels(
    	chat_id int,
    	channel_id VARCHAR(50),
    	channel_title VARCHAR(50),
    	last_video_id VARCHAR(50),
    	last_video_title VARCHAR(50)
    	)
    """)


class Utils:
    def auth(self):
        # –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        authorize = vk_api.VkApi(token=config["group"]["group_token"])
        self.bot = authorize.get_api()

        # –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        vk_session = vk_api.VkApi(token=config["user"]["user_token"])
        self.vk = vk_session.get_api()

        # –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        vk_session = vk_api.VkApi(token=config["app"]["app_token"])
        self.app = vk_session.get_api()

    def get_conversations_count(self):
        """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–µ–¥, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç"""
        chat_id = 1
        while True:
            try:
                chat_id += 1
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ—Å–µ–¥–µ
                self.bot.messages.getConversationsById(
                    peer_ids=2000000000 + chat_id,
                    group_id=config["group"]["group_id"]
                )
            except Exception as e:
                # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±–µ—Å–µ–¥–µ, —Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏–∫–ª
                if(e.code == 927):
                    return chat_id - 1

    def set_status(self):
        """–ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É –≥—Ä—É–ø–ø—ã –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conversations_count = self.get_conversations_count()
        message = "üî•–Æ—Ç—É–± –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ {}!üî•".format(
            numeral.get_plural(conversations_count, "–±–µ—Å–µ–¥–µ, –±–µ—Å–µ–¥–∞—Ö, –±–µ—Å–µ–¥–∞—Ö")
        )

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ
        self.vk.status.set(
            text=message,
            group_id=config["group"]["group_id"]
        )

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.vk.status.set(
            text=message
        )

    def show_chats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É —É —á–∞—Ç–∞—Ö"""
        frame = pd.read_sql("SELECT * FROM Chats", db)

        pd.set_option('display.expand_frame_repr', False)

        frame = frame.to_string(index=False)

        print(frame)

    def show_channels(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –æ —é—Ç—É–± –∫–∞–Ω–∞–ª–∞—Ö"""
        frame = pd.read_sql("SELECT * FROM Channels", db)

        pd.set_option('display.expand_frame_repr', False)

        frame = frame.to_string(index=False)

        print(frame)

    def get_top_channels(self) -> list:
        """–í–æ–≤—Ä–∞—â–∞–µ—Ç –ø—è—Ç—å —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —é—Ç—É–± –∫–∞–Ω–∞–ª–æ–≤"""
        channels = dict()
        mycursor.execute("SELECT * FROM Channels")
        for channel in mycursor.fetchall():
            channel_title = channel[2]
            if channel_title not in channels.keys():
                channels[channel_title] = 1
            else:
                channels[channel_title] += 1

        channels = sorted(channels.items(), key=itemgetter(1), reverse=True)[:5]
        return channels

    def widget(self):
        code = {
            "title": "–õ—É—á—à–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏!",
            "title_url": "—Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ—é –≥—Ä—É–ø–ø—É",
            "head": [
                {
                    "text": "–ò–º—è"
                },
                {
                    "text": "–ö–æ–ª–ª–∏–µ—Å—Ç–≤–æ",
                    "align": "right"
                }
            ],
            "body": [
                [
                    {
                        "icon_id": "id242306128",
                        "text": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë—É–ª—å–±–µ–Ω–∫–æ–≤",
                        "url": "vk.com/id242306128"
                    },
                    {
                        "text": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ 1x2"
                    }
                ],
                [
                    {
                        "icon_id": "id242306128",
                        "text": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë—É–ª—å–±–µ–Ω–∫–æ–≤",
                        "url": "vk.com/id242306128"
                    },
                    {
                        "text": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ 1x2"
                    }
                ],
                [
                    {
                        "icon_id": "id242306128",
                        "text": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë—É–ª—å–±–µ–Ω–∫–æ–≤",
                        "url": "vk.com/id242306128"
                    },
                    {
                        "text": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ 1x2"
                    }
                ]
            ],
            "more": "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
            "more_url": "https://vk.com/write-–ê–ô–î–ò_–ì–†–£–ü–ü–´"
        }
        self.app.appWidgets.update(
            code=code,
            type="table"
        )


class YouTubeParser(object):
    def __init__(self, api_keys):
        self.api_keys = api_keys.split(",")
        self.api_key = self.api_keys[0]

    def get_channel_info(self, title: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id —é—Ç—É–± –∫–∞–Ω–∞–ª–∞"""
        url = "https://www.googleapis.com/youtube/v3/search?"
        params = {
            "part": "snippet",
            "key": self.api_key,
            "q": title.lower().replace(" ", "+")
        }
        response = requests.get(url=url, params=params)
        data = json.loads(response.text)

        if response.status_code == 200:
            # –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ
            items = data["items"]
            for item in items:
                kind = item["id"]["kind"]
                if kind == "youtube#channel":
                    channel_id = item["id"]["channelId"]
                    channel_title = item["snippet"]["title"]
                    return {
                        "id": channel_id,
                        "title": channel_title
                    }
            return 404
        elif response.status_code == 403:
            self.quota_exceeded()
            return 403

    def get_last_video(self, channel_id: str):
        """–í–æ–≤—Ä–∞—â–∞–µ—Ç id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ —é—Ç—É–± –∫–∞–Ω–∞–ª–∞"""
        url = "https://www.googleapis.com/youtube/v3/search?"
        params = {
            "key": self.api_key,
            "channelId": channel_id,
            "id": "",
            "order": "date"
        }
        # url = f"{self.domain}/search?key={self.api_key}&channelId={channel_id}&id&order=date"
        response = requests.get(url=url, params=params)

        if response.status_code == 200:
            # –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ
            data = json.loads(response.text)
            last_video_id = data["items"][0]["id"]["videoId"]
            return last_video_id
        elif response.status_code == 403:
            self.quota_exceeded()
            return 403

    def get_video_title(self, video_id: str):
        """–í–æ–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ –µ–≥–æ id"""
        url = "https://www.googleapis.com/youtube/v3/videos?"
        params = {
            "part": "snippet",
            "id": video_id,
            "key": self.api_key
        }
        response = requests.get(url=url, params=params)

        if response.status_code == 200:
            # –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ
            data = json.loads(response.text)
            video_title = data["items"][0]["snippet"]["title"]
            return video_title
        elif response.status_code == 403:
            self.quota_exceeded()
            return 403

    def quota_exceeded(self):
        """
        –ö–≤–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ :(
        –ú–µ–Ω—è–µ–º –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å api
        """
        self.api_key = get_next(self.api_keys, self.api_key)
        console_log("–ö–≤–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ :(")
        console_log("–ú–µ–Ω—è–µ–º –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ YouTube api")


class Bot:
    def auth(self):
        # –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        authorize = vk_api.VkApi(token=config["group"]["group_token"])
        self.longpoll = VkBotLongPoll(
            vk=authorize,
            group_id=config["group"]["group_id"]
        )
        self.bot = authorize.get_api()

        # –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        vk_session = vk_api.VkApi(token=config["user"]["user_token"])
        self.upload = vk_api.VkUpload(vk_session)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —É—Ç–∏–ª–∏—Ç—ã
        self.utils = Utils()

    def upload_video(self, video_url: str, video_title: str):
        response = self.upload.video(
            link=video_url,
            group_id=config["group"]["group_id"],
            name=video_title,
            is_private=True
        )
        attachment = "video{}_{}".format(response["owner_id"], response["video_id"])
        return attachment

    def add_chat(self, chat_id: int):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö id –Ω–æ–≤–æ–π –±–µ—Å–µ–¥—ã"""
        try:
            console_log(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É {chat_id}")
            mycursor.execute("INSERT INTO Chats (id, added) VALUES (%s, %s)", (chat_id, datetime.now()))
            db.commit()
        except Exception as e:
            console_log("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            print(e)

    def add_channel(self, chat_id: int, channel_title: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —é—Ç—É–± –∫–∞–Ω–∞–ª –≤ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ—Å–µ–¥—ã"""
        channel_info = youtube.get_channel_info(channel_title)

        if channel_info == 404:
            message = "–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω"
        elif channel_info == 403:
            message = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë–µ–∑ –ø–∞–Ω–∏–∫–∏! –í—Å–µ–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö!"
        else:
            # –ü–æ–ª—É—á–∞–µ–º id —é—Ç—É–± –∫–∞–Ω–∞–ª–∞
            channel_id = channel_info["id"]

            # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ —é—Ç—É–± –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –±–µ—Å–µ–¥–∞
            mycursor.execute("SELECT * FROM Channels where chat_id = %s", (chat_id))

            # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ id —é—Ç—É–± –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –±–µ—Å–µ–¥–∞
            channel_ids = [channel[1] for channel in mycursor.fetchall()]

            # –ï—Å–ª–∏ –±–µ—Å–µ–¥–∞ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ —ç—Ç–æ—Ç —é—Ç—É–± –∫–∞–Ω–∞–ª
            if channel_id in channel_ids:
                message = f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª"
            else:
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å–æ–∫ - 3
                if len(channel_ids) == 3:
                    message = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤. " \
                              f"–û—Ç–ø–∏—à–∏—Ç–µ—Å—å –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª."

                else:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é—Ç—É–± –∫–∞–Ω–∞–ª–µ
                    channel_title = channel_info["title"]
                    last_video_id = youtube.get_last_video(channel_id)
                    last_video_title = youtube.get_video_title(last_video_id)

                    # –î–æ–±–∞–≤–ª—è–µ–º —é—Ç—É–± –∫–∞–Ω–∞–ª –≤ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ—Å–µ–¥—ã
                    mycursor.execute("""
                    INSERT INTO Channels (chat_id, channel_id, channel_title, last_video_id, last_video_title) 
                    VALUES (%s, %s, %s, %s, %s)
                    """, (chat_id, channel_id, channel_title, last_video_id, last_video_title))

                    db.commit()

                    message = f"‚úÖ–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_title}"
                    console_log(f"–ë–µ—Å–µ–¥–∞ {chat_id} –ø–æ–¥–ø–∏—Å–∞–ª–∞—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_title}")

        self.bot.messages.send(
            chat_id=chat_id,
            message=message,
            random_id=get_random_id()
        )

    def remove_channel(self, chat_id: int, channel_title: str):
        channel_info = youtube.get_channel_info(channel_title)
        if channel_info == 404:
            message = "–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω"
        elif channel_info == 403:
            message = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë–µ–∑ –ø–∞–Ω–∏–∫–∏! –í—Å–µ–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö!"
        else:
            # –ü–æ–ª—É—á–∞–µ–º id —é—Ç—É–± –∫–∞–Ω–∞–ª–∞
            channel_id = channel_info["id"]

            # –ü–æ–ª—É—á–∞–µ–º id –≤—Å–µ—Ö —é—Ç—É–± –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –±–µ—Å–µ–¥–∞
            mycursor.execute("SELECT * FROM Channels where chat_id = %s", (chat_id))
            channel_ids = [channel[1] for channel in mycursor.fetchall()]

            # –ï—Å–ª–∏ –±–µ—Å–µ–¥–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ —é—Ç—É–± –∫–∞–Ω–∞–ª
            if channel_id not in channel_ids:
                message = "–ö–∞–∫ —Ç—ã —Å–æ–±—Ä–∞–ª—Å—è –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω? –ü–µ—Ç—É—Ö"
            else:
                # –£–¥–∞–ª—è–µ–º —é—Ç—É–± –∫–∞–Ω–∞–ª –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥—ã
                mycursor.execute("""
                DELETE FROM Channels 
                WHERE chat_id = %s AND channel_id = %s
                """, (chat_id, channel_id))

                db.commit()

                message = f"‚ùå–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ {channel_title}"
                console_log(f"–ë–µ—Å–µ–¥–∞ {chat_id} –æ—Ç–ø–∏—Å–∞–ª–∞—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ {channel_title}")

        self.bot.messages.send(
            chat_id=chat_id,
            message=message,
            random_id=get_random_id()
        )

    def remove_all_channels(self, chat_id: int):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —é—Ç—É–± –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –±–µ—Å–µ–¥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º id –≤—Å–µ—Ö —é—Ç—É–± –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –±–µ—Å–µ–¥–∞
        mycursor.execute("SELECT channel_id FROM Channels WHERE chat_id = %s", chat_id)
        channel_ids = [channel[0] for channel in mycursor.fetchall()]

        if len(channel_ids) == 0:
            message = "–û—Ç —á–µ–≥–æ —Ç—ã –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Å–æ–±—Ä–∞–ª—Å—è? –ü–µ—Ç—É—Ö"
        else:

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —é—Ç—É–± –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –±–µ—Å–µ–¥–∞
            mycursor.execute("DELETE FROM Channels WHERE chat_id = %s", chat_id)

            db.commit()

            message = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"
            console_log(f"–ë–µ—Å–µ–¥–∞ {chat_id} –æ—Ç–ø–∏—Å–∞–ª–∞—Å—å –æ—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤")

        self.bot.messages.send(
            chat_id=chat_id,
            message=message,
            random_id=get_random_id()
        )

    def show_subscriptions(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –±–µ—Å–µ–¥—É —Å–ø–∏—Å–æ–∫ —é—Ç—É–± –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –±–µ—Å–µ–¥–∞"""

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –≤—Å–µ—Ö —é—Ç—É–± –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –±–µ—Å–µ–¥–∞
        mycursor.execute("SELECT * FROM Channels where chat_id = %s", (chat_id))
        channels = [channel for channel in mycursor.fetchall()]

        if len(channels) == 0:
            message = "–£ —ç—Ç–æ–π –±–µ—Å–µ–¥—ã –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
        else:
            message = f"{len(channels)}/3 –ø–æ–¥–ø–∏—Å–æ–∫"
            for i, channel in enumerate(channels, start=1):
                message += f"\n{i}. {channel[2]}"

        self.bot.messages.send(
            chat_id=chat_id,
            message=message,
            random_id=get_random_id()
        )

    def show_video(self, chat_id: int, video_title: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –±–µ—Å–µ–¥—É –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"""
        # ToDo —Å–¥–µ–ª–∞—Ç—å
        pass
        # with open("chats.json", encoding="utf-8") as f:
        #     data = json.load(f)
        # first_channel = data["chats"]["1"]["channels"][0]
        # self._notification(chat_id, first_channel)

    def get_help(self, chat_id: int):
        message = """
        –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
        !–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞>
        !–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞>
        !–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        !–≤–∏–¥–µ–æ <–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ>
        !–ø–æ–¥–ø–∏—Å–∫–∏
        !–ø–æ–º–æ—â—å  
        """

        self.bot.messages.send(
            chat_id=chat_id,
            message=message,
            random_id=get_random_id()
        )

    def notification(self, chat_id: int, channel: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –±–µ—Å–µ–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"""
        channel_id = channel["channel_id"]
        channel_title = channel["channel_title"]
        video_id = channel["last_video_id"]
        video_title = channel["last_video_title"]
        video_url = f"https://www.youtube.com/watch?v={video_id}&ab_channel={channel_id}"
        message = f"–ù–∞ –∫–∞–Ω–∞–ª–µ {channel_title} –≤—ã—à–ª–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ!"

        console_log(message)
        console_log(video_title)

        self.bot.messages.send(
            chat_id=chat_id,
            message=message,
            attachment=self.upload_video(video_url, video_title),
            random_id=get_random_id()
        )

    def show_top_channels(self, chat_id: int):
        channels = self.utils.get_top_channels()

        message = "üî•–¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤üî•"
        for i, channel in enumerate(channels, start=1):
            channel_title = channel[0]
            subscriptions_count = channel[1]
            message += f"\n{i}. {channel_title} - {subscriptions_count}"

        self.bot.messages.send(
            chat_id=chat_id,
            message=message,
            random_id=get_random_id()
        )

    def check_chats(self):
        while True:
            console_log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤")

            # –ü–æ–ª—É—á–∞–µ–º id –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç
            mycursor.execute("SELECT id FROM Chats")
            chat_ids = [chat[0] for chat in mycursor.fetchall()]

            for chat_id in chat_ids:
                # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –≤—Å–µ—Ö —é—Ç—É–± –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –±–µ—Å–µ–¥–∞
                mycursor.execute("SELECT * FROM Channels WHERE chat_id = %s", chat_id)
                channels = [channel for channel in mycursor.fetchall()]

                for channel in channels:

                    channel_id = channel[1]
                    channel_title = channel[2]
                    last_video_id = youtube.get_last_video(channel_id)
                    # –ï—Å–ª–∏ –Ω–∞ –∫–∞–Ω–∞–ª–µ –≤—ã—à–ª–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
                    if last_video_id != 403 and last_video_id != channel[3]:
                        # –û–±–Ω–æ–≤–ª—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ —É —é—Ç—É–± –∫–∞–Ω–∞–ª–∞
                        last_video_id = youtube.get_last_video(channel_id)
                        last_video_title = youtube.get_video_title(last_video_id)
                        mycursor.execute("""
                        UPDATE Channels 
                        SET last_video_id = %s, last_video_title = %s 
                        WHERE chat_id = %s AND channel_id = %s
                        """, (last_video_id, last_video_title, chat_id, channel_id))

                        db.commit()

                        channel = {
                            "channel_id": channel_id,
                            "channel_title": channel_title,
                            "last_video_id": last_video_id,
                            "last_video_title": last_video_title
                        }

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É
                        self.notification(chat_id, channel)

            time.sleep(3600)  # –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å

    def listen(self):
        """
        –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö(–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã, —Ç–æ
        —Ñ—É–Ω–∫—Ü–∏—é create_tables –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å).
        –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∫—É –≤—Å–µ—Ö –±–µ—Å–µ–¥.
        """
        # create_tables()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console_log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        while True:
            try:
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –±–µ—Å–µ–¥–µ
                for event in self.longpoll.listen():
                    if event.type == VkBotEventType.MESSAGE_NEW and event.from_chat:
                        received_message = event.message["text"].lower()
                        chat_id = event.chat_id

                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –∏–∑ –±–µ—Å–µ–¥—ã –∏ —ç—Ç–æ–π –±–µ—Å–µ–¥—ã –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –¥–æ–≤–∞–±–ª—è–µ–º –µ—ë id
                        mycursor.execute("SELECT id FROM Chats")
                        result = mycursor.fetchall()
                        chat_ids = [chat_id[0] for chat_id in result]
                        if chat_id not in chat_ids:
                            self.add_chat(chat_id)

                        # –ï—Å–ª–∏ –±–æ—Ç–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É
                        if "action" in event.message:
                            if event.message["action"]["type"] == "chat_invite_user":
                                if event.message["action"]["member_id"] == -int(config["group"]["group_id"]):
                                    self.add_chat(chat_id)

                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                        if received_message in ["!–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "!–≤–∏–¥–µ–æ"]:
                            continue

                        if received_message[:12] == "!–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
                            channel_title = received_message.split(" ")[1].replace(" ", "")
                            self.add_channel(chat_id, channel_title)
                        elif received_message == "!–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è":
                            self.remove_all_channels(chat_id)
                        elif fuzz.ratio(received_message[:11], "!–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è") > 85:
                            channel_title = received_message.split(" ")[1]
                            self.remove_channel(chat_id, channel_title)
                        elif fuzz.ratio(received_message, "!–ø–æ–¥–ø–∏—Å–∫–∏") > 75:
                            self.show_subscriptions(chat_id)
                        elif fuzz.ratio(received_message, "!–≤–∏–¥–µ–æ") > 75:
                            video_title = received_message.split(" ")[1]
                            self.show_video(chat_id, video_title)
                        elif fuzz.ratio(received_message, "!–ø–æ–º–æ—â—å") > 75:
                            self.get_help(chat_id)
                        elif fuzz.ratio(received_message, "!—Ç–æ–ø") > 75:
                            self.show_top_channels(chat_id)
            except (requests.exceptions.ReadTimeout, requests.exceptions.ConnectionError) as e:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
                print(e)
                console_log("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")


if __name__ == "__main__":
    # –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–µ–º—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube API
    youtube = YouTubeParser(
        api_keys=config["youtube"]["api_keys"]
    )

    vkbot = Bot()
    vkbot.auth()

    p1 = Thread(target=connection)
    p1.start()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    time.sleep(0.1)
    p2 = Thread(target=vkbot.listen)
    p2.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ—Å–µ–¥
    time.sleep(0.1)
    p1 = Thread(target=vkbot.check_chats)
    p1.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —é—Ç—É–± –∫–∞–Ω–∞–ª–æ–≤